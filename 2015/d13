#!/usr/bin/ruby

require 'set'

module AdventOfCode
  module D13
    class Seater
      def initialize
        @pairs = {}
        @parties = Set.new
      end

      def parse(s)
        m = /^(\S+) would (gain|lose) (\d+) happiness.*next to (\S+)\./.match s
        raise 'Invalid' unless m
        magnitude = m[3].to_i
        add_pair(m[1], m[4], m[2] == 'lose' ? -magnitude : magnitude)
      end

      def add_me
        parties = @parties.to_a
        parties.each do |p|
          add_pair(p, 'me', 0)
          add_pair('me', p, 0)
        end
      end

      def optimal_happiness
        parties = @parties.to_a
        count = parties.count
        choices = []
        parties.permutation do |p|
          value = 0
          p.each_with_index do |party, i|
            pair = [party, p[(i + 1) % count]]
            value += @pairs[pair] + @pairs[pair.reverse]
          end
          choices << value
        end
        choices.max
      end

      private

      def add_pair(a, b, happiness)
        pair = [a, b]
        @parties << a
        @parties << b
        @pairs[pair] = happiness
      end
    end
  end
end

def script
  p = AdventOfCode::D13::Seater.new
  $stdin.each_line do |line|
    p.parse(line)
  end
  puts "Optimal happiness is: #{p.optimal_happiness}"
  p.add_me
  puts "Optimal happiness is now: #{p.optimal_happiness}"
  return 0
end

exit script(*ARGV) if __FILE__ == $0
