#!/usr/bin/ruby

require 'set'

module AdventOfCode
  module D18
    class LightArray
      attr_reader :lights

      def initialize(size, stuck = false)
        @lights = size.times.map { [false] * size }
        @size = size
        @stuck = stuck
      end

      def load_state(s)
        s.each_line.with_index do |line, y|
          @size.times do |x|
            @lights[x][y] = line[x] == '#'
          end
        end
      end

      def next!
        new_lights = @size.times.map { [false] * @size }
        @size.times do |x|
          @size.times do |y|
            total = 0
            (-1..1).each do |sx|
              (-1..1).each do |sy|
                next if sx.zero? && sy.zero?
                total += state(x + sx, y + sy) ? 1 : 0
              end
            end
            new_lights[x][y] = state(x, y) ? (2..3).include?(total) : total == 3
          end
        end
        @lights = new_lights
      end

      def to_s
        s = ''
        @size.times do |y|
          @size.times do |x|
            s += state(x, y) ? '#' : '.'
          end
          s += "\n"
        end
        s
      end

      def count
        total = 0
        @size.times do |x|
          @size.times do |y|
            total += 1 if state(x, y)
          end
        end
        total
      end

      def state(x, y)
        edge = [0, @size - 1]
        return true if @stuck && edge.include?(x) && edge.include?(y)
        return false unless (0...@size).include?(x)
        return false unless (0...@size).include?(y)
        @lights[x][y]
      end
    end
  end
end

def script
  state = $stdin.read
  [false, true].each do |stuck|
    la = AdventOfCode::D18::LightArray.new(100, stuck)
    la.load_state(state)
    100.times { la.next! }
    puts "Number of lights lit is: #{la.count} (stuck mode #{stuck})"
  end
  return 0
end

exit script(*ARGV) if __FILE__ == $0
