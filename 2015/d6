#!/usr/bin/ruby

require 'digest'

module AdventOfCode
  module D6
    class LightArray
      def initialize
        @lights = 1000.times.map { [false] * 1000 }
      end

      def on?(x, y)
        @lights[x][y]
      end

      # Returns the number of lights lit.
      def count
        @lights.reduce(0) { |memo, row| memo + row.count { |c| c } }
      end

      def process(s)
        case s
        when /^turn on (\d+),(\d+) through (\d+),(\d+)/
          set(*Regexp.last_match[1..4].map(&:to_i), true)
        when /^toggle (\d+),(\d+) through (\d+),(\d+)/
          toggle(*Regexp.last_match[1..4].map(&:to_i))
        when /^turn off (\d+),(\d+) through (\d+),(\d+)/
          set(*Regexp.last_match[1..4].map(&:to_i), false)
        end
      end

      private

      def set(x1, y1, x2, y2, value)
        (x1..x2).each { |x| (y1..y2).each { |y| @lights[x][y] = value } }
      end

      def toggle(x1, y1, x2, y2)
        (x1..x2).each do |x|
          (y1..y2).each { |y| @lights[x][y] = !@lights[x][y] }
        end
      end
    end
  end
end

def script(*_args)
  p = AdventOfCode::D6::LightArray.new
  $stdin.each do |line|
    p.process(line)
  end
  puts "Answer is: #{p.count}"
  return 0
end

exit script(ARGV) if __FILE__ == $0
